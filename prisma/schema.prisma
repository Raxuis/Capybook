// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  username      String    @unique
  name          String?
  password      String? // Keeping for credentials-based login
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  UserBook         UserBook[]
  BookReview       BookReview[]
  UserBookWishlist UserBookWishlist[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model UserBook {
  id            String    @id @default(cuid())
  userId        String
  bookId        String
  isCurrentBook Boolean   @default(false)
  progress      Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  finishedAt    DateTime?
  User          User      @relation(fields: [userId], references: [id])
  Book          Book      @relation(fields: [bookId], references: [id])
}

model UserBookWishlist {
  id        String   @id @default(cuid())
  userId    String
  bookId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])
  Book      Book     @relation(fields: [bookId], references: [id])
}

model Book {
  id               String             @id @default(cuid())
  key              String             @unique
  title            String
  authors          String[]
  cover            String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  UserBook         UserBook[]
  BookReview       BookReview[]
  UserBookWishlist UserBookWishlist[]
}

model BookReview {
  id        String   @id @default(cuid())
  userId    String
  bookId    String
  rating    Int?
  feedback  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])
  Book      Book     @relation(fields: [bookId], references: [id])

  @@unique([userId, bookId])
}
